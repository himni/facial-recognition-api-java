/*
 * facial recognition api
 * # Introducão  Seja bem-vindo a documentação da API de Reconhecimento Facial da [HIMNI.COM](https://himni.com)   Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de um [HTTP BEARER TOKEN](https://oauth.net/2/bearer-tokens/) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://face.himni.com.br/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.PersonCreate;
import io.swagger.client.model.PersonCreateRequest;
import io.swagger.client.model.PersonList;
import io.swagger.client.model.PersonUpdate;
import io.swagger.client.model.PersonUpdateRequest;
import io.swagger.client.model.PersonView;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PersonApi
 */
@Ignore
public class PersonApiTest {

    private final PersonApi api = new PersonApi();

    /**
     * Person - Create
     *
     * Cria uma nova Pessoa no Grupo de Pessoas especificado. Para cadastrar uma Face para esta Pessoa, utilize o endpoint Person - Create Face.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personCreateTest() throws ApiException {
        PersonCreateRequest body = null;
        PersonCreate response = api.personCreate(body);

        // TODO: test validations
    }
    /**
     * Person - Delete
     *
     * Exclui uma Pessoa existente em um Grupo de Pessoas. Todos os dados relacionados a esta entidade (nome, metadados, identificador e modelos de reconhecimento facial) serão excluídos.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personDeleteTest() throws ApiException {
        String personUuid = null;
        api.personDelete(personUuid);

        // TODO: test validations
    }
    /**
     * Person - List
     *
     * Exibe uma listagem de todas as informações das Pessoas no Grupo de Pessoas especificado, incluindo identificador, nome, metadados e modelos de reconhecimento facial cadastrados.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personListTest() throws ApiException {
        List<PersonList> response = api.personList();

        // TODO: test validations
    }
    /**
     * Person - Update
     *
     * Atualiza o nome e / ou metadados de uma Pessoa.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personUpdateTest() throws ApiException {
        PersonUpdateRequest body = null;
        String personUuid = null;
        PersonUpdate response = api.personUpdate(body, personUuid);

        // TODO: test validations
    }
    /**
     * Person - View
     *
     * Retorna o nome, os metadados e os modelos de reconhecimento facial de uma Pessoa.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personViewTest() throws ApiException {
        String personUuid = null;
        PersonView response = api.personView(personUuid);

        // TODO: test validations
    }
}
