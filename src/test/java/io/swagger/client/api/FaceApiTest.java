/*
 * facial recognition api
 * # Introducão  Seja bem-vindo a documentação da API de Reconhecimento Facial da [HIMNI.COM](https://himni.com)   Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de um [HTTP BEARER TOKEN](https://oauth.net/2/bearer-tokens/) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://face.himni.com.br/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.PersonCreateFace;
import io.swagger.client.model.PersonUpdateFace;
import io.swagger.client.model.PersonUpdateFaceRequest;
import io.swagger.client.model.PersonViewFace;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FaceApi
 */
@Ignore
public class FaceApiTest {

    private final FaceApi api = new FaceApi();

    /**
     * Person - Create Face
     *
     * Cadastra uma Face para uma Pessoa no Grupo de Pessoas especificado. Em fotos com mais de um rosto, apenas o primeiro rosto identificado será utilizado. Nenhuma imagem é armazenada. Apenas os modelos de reconhecimento facial gerados a partir das imagens serão mantidos no servidor até que seja feita uma chamada a um destes endpoints: Person Group - Delete, Person - Delete e Person - Delete Face.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personCreateFaceTest() throws ApiException {
        String personUuid = null;
        String picture = null;
        String meta = null;
        PersonCreateFace response = api.personCreateFace(personUuid, picture, meta);

        // TODO: test validations
    }
    /**
     * Person - Delete Face
     *
     * Exclui uma Face de uma Pessoa existente no Grupo de Pessoas especificado.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personDeleteFaceTest() throws ApiException {
        String personUuid = null;
        String faceUuid = null;
        api.personDeleteFace(personUuid, faceUuid);

        // TODO: test validations
    }
    /**
     * Person - Update Face
     *
     * Atualiza os metados de uma Face existente.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personUpdateFaceTest() throws ApiException {
        PersonUpdateFaceRequest body = null;
        String personUuid = null;
        String faceUuid = null;
        PersonUpdateFace response = api.personUpdateFace(body, personUuid, faceUuid);

        // TODO: test validations
    }
    /**
     * Person - View Face
     *
     * Exibe as informações (identificador e metadados) de uma Face. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void personViewFaceTest() throws ApiException {
        String personUuid = null;
        String faceUuid = null;
        PersonViewFace response = api.personViewFace(personUuid, faceUuid);

        // TODO: test validations
    }
}
